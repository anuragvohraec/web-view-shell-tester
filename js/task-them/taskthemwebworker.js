(()=>{"use strict";const e=new Set(["COMPLETED","FAILED"]);var t,a;!function(e){e.INIT_WEBWORKER="INIT_WEBWORKER",e.CHANGE_TASK_STATE="CHANGE_TASK_STATE",e.CHANGE_TASK_PHASE="CHANGE_TASK_PHASE",e.CREATE_TASK="CREATE_TASK",e.RUN_A_TASK="RUN_A_TASK",e.GET_TASK_STATUS="GET_TASK_STATUS",e.CLEAR_TASK_THEM="CLEAR_TASK_THEM"}(t||(t={})),function(e){e.RUN_TASK="RUN_TASK",e.TASK_STATUS="TASK_STATUS",e.CLEAR_TASK_THEM="CLEAR_TASK_THEM",e.PHASE_CHANGE="PHASE_CHANGE"}(a||(a={}));const s="_task_them_entries",r=new class{constructor(e,t,a){this.databaseName=e,indexedDB&&(this.req=indexedDB.open(e,t),this.req.onupgradeneeded=e=>{this.db=this.req.result,a.forEach((e=>{this.createObjectStore(e)}))},this.isInitialized=new Promise(((e,t)=>{this.req.onsuccess=t=>{this.db=this.req.result,e(!0)}})))}closeTheDB(){this.db.close()}static async checkIfDBExist(e){return(await indexedDB.databases()).map((e=>e.name)).includes(e)}async getCountInStore(e){try{const t=this.db.transaction([e]).objectStore(e).count();return await new Promise((e=>{t.onsuccess=()=>{e(t.result)}}))}catch(e){return console.error(e),-1}}async getLastObjectFromObjectStore(e){try{const t=this.db.transaction([e]).objectStore(e).openCursor(null,"prev");return(await new Promise(((e,a)=>{t.onsuccess=t=>{e(t.target.result)},t.onerror=a})))?.value}catch(e){return void console.error(e)}}async deleteTheDB(){if(await this.isInitialized)try{this.closeTheDB();const e=indexedDB.deleteDatabase(this.databaseName);return"success"===(await(async()=>new Promise(((t,a)=>{e.onsuccess=t,e.onerror=a})))()).type}catch(e){return console.error("Failed to delete the database"),console.error(e),!1}}createObjectStore(e){if(!this.db.objectStoreNames.contains(e.name)){let t;if(t=e.primaryKeyName?this.db.createObjectStore(e.name,{keyPath:e.primaryKeyName}):this.db.createObjectStore(e.name,{autoIncrement:!0}),e.indexes)for(let a of e.indexes)t.createIndex(a,a)}}async cleanAllObjectStores(){let e=!1;if(await this.isInitialized){const t=this.db.objectStoreNames.length;try{for(let e=0;e<t;e++){const t=this.db.objectStoreNames.item(e),a=this.db.transaction([t],"readwrite").objectStore(t).clear();if(!await new Promise((e=>{a.onsuccess=t=>{e(!0)},a.onerror=t=>{e(!1)}})))throw`${t} not cleared`}e=!0}catch(e){console.error(e)}}return e}async create(e,t){if(await this.isInitialized)try{const a=this.db.transaction([e],"readwrite").objectStore(e).add(t);return await new Promise(((e,t)=>{a.onsuccess=()=>{e(!0)},a.onerror=()=>{e(!1)}}))}catch(e){return console.error("Failed to create"),console.error(e),!1}}async updateItemWithKey(e,t,a){const s=this.db.transaction([e],"readwrite").objectStore(e);return s?await new Promise(((e,a)=>{s.getKey(t).onsuccess=t=>{let a=s.result;e(!!a)}}))?await new Promise(((e,r)=>{const n=s.put(a,t);n.onsuccess=t=>{e(!0)},n.onerror=a=>{console.error(`Failed to save attachment ${this.databaseName}/${t}`),console.error(a),e(!1)}})):await new Promise(((e,r)=>{const n=s.add(a,t);n.onsuccess=t=>{e(!0)},n.onerror=a=>{console.error(`Failed to save attachment ${this.databaseName}/${t}`),console.error(a),e(!1)}})):(console.log("No such DB: ",e),!1)}async read(e,t){if(await this.isInitialized)return await this._read(e,t)}async _read(e,t){try{const a=this.db.transaction([e]).objectStore(e);if(t){const e=a.get(t);return await new Promise((t=>{e.onsuccess=e=>{t(e.target.result)},e.onerror=e=>{t(void 0)}}))}return await new Promise((e=>{let t=a.getAll();t.onsuccess=t=>{e(t.target.result)},t.onerror=t=>{e(void 0)}}))}catch(e){console.error(e)}}async _update(e,t){if(await this.isInitialized)try{const a=this.db.transaction([e],"readwrite").objectStore(e).put(t);return await new Promise((e=>{a.onsuccess=t=>{e(!0)},a.onerror=t=>{e(!1)}}))}catch(e){return console.error("Failed to update"),console.error(e),!1}}async update(e,t,a,s){const r=await this.read(e,t);if(r){const t=await a(r);return!!t&&await this._update(e,t)}return!!s&&await this.create(e,s)}async delete(e,t){if(await this.isInitialized){const a=this.db.transaction([e],"readwrite").objectStore(e).delete(t);return await new Promise((e=>{a.onsuccess=t=>{e(!0)},a.onerror=t=>{e(!1)}}))}}async find(e,t,a){const s=[];if(await this.isInitialized){const r=this.db.transaction([e],"readonly").objectStore(e).index(t);if(r){const e=IDBKeyRange.only(a);await new Promise((t=>{r.openCursor(e).onsuccess=e=>{const a=e.target.result;a?(s.push(a.value),a.continue()):t()}}))}}return s}}("TASK_THEM_DB",1,[{name:s,primaryKeyName:"_id",indexes:["task_name","ended","created_date","updated_date"]}]),n=new ReadableStream({start:e=>{onmessage=t=>{e.enqueue(t)}}});class o{static async init(e){const t=await r.find(s,"ended","false");if(t.length>0){t.sort(((e,t)=>e.created_date-t.created_date));for(let e of t)postMessage({type:a.RUN_TASK,data:e})}if(e>-1){const t=await r.find(s,"ended","true");if(t.length>0){t.sort(((e,t)=>e.created_date-t.created_date));for(let a of t)a.created_date<=e&&await r.delete(s,a._id)}}}}o.process=async()=>{for await(let i of async function*(){const e=n.getReader();try{for(;;){const{done:t,value:a}=await e.read();if(t){console.warn("This should not end and should keep running!");break}yield a}}finally{e.releaseLock()}}())if(i){const n=i.data.data,c=i.data.type;switch(c){case t.CLEAR_TASK_THEM:await r.cleanAllObjectStores()?postMessage({type:a.CLEAR_TASK_THEM,data:!0}):postMessage({type:a.CLEAR_TASK_THEM,data:!1});break;case t.GET_TASK_STATUS:{const e=n.task_id;let t=await r.read(s,e);postMessage({type:a.TASK_STATUS,data:t})}break;case t.INIT_WEBWORKER:let d=i.data.archive_ended_task_before;await o.init(d);break;case t.CHANGE_TASK_STATE:{const t=n.task_id,a=n.state;await r.update(s,t,(t=>{e.has(a)&&(t.ended="true");const s=(new Date).getTime();if(t.updated_date=s,t.updates_logs[s]=`STATE CHANGED: ${a} , from: <${t.state}>`,"INIT"===a){const e=t.phase;t.phase=t.init_phase,t.phase_data=t.init_phase_data,t.updates_logs[s+1]=`PHASE CHANGED: ${t.init_phase} , from: <${e}>`}return t.state=a,t}))}break;case t.CHANGE_TASK_PHASE:{const e=n.task_id,t=n.phase,o=n.phase_data;await r.update(s,e,(e=>{const s=(new Date).getTime();e.updated_date=s,e.updates_logs[s]=`PHASE CHANGED: ${t} , from: <${e.phase}>`,e.state="CONTINUE",e.phase=t,e.phase_data=o;const r={task_name:e.task_name,new_phase:t,new_phase_data:o};return postMessage({type:a.PHASE_CHANGE,data:r}),e}))}break;case t.CREATE_TASK:{const e=n.task_name,t=n.behaves;if("ONLY_ONCE_IN_LIFE"===t){if((await r.find(s,"task_name",e)).length>0)break}else if("ONLY_ONE_ACTIVE_IN_QUEUE"===t){const t=await r.find(s,"ended","false");if(t.length>0&&t.filter((t=>t.name===e)).length>0)break}const o=n.task_desc,i=n.init_phase,c=n.init_phase_data,d=(new Date).getTime(),_={};_[d]="STATE CHANGED: INIT",_[d+1]=`PHASE CHANGED: ${i}`;const l=n._id,h={task_name:e,task_desc:o,init_phase:i,init_phase_data:c,behaves:t,_id:l,created_date:d,phase:i,phase_data:c,state:"INIT",ended:"false",updated_date:d,updates_logs:_};await r.create(s,h)&&postMessage({type:a.RUN_TASK,data:h})}break;case t.RUN_A_TASK:{const{task_id:e}=n,t=await r.read(s,e);t&&"true"!==t.ended&&postMessage({type:a.RUN_TASK,data:t})}break;default:throw`No such case: ${c} registered with scheduler!`}}},o.process()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,